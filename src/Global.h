#pragma once
#include <cryptopp/Integer.h>

namespace Global
{

    const static CryptoPP::Integer p("0xc5d1fff6e1e0b5b5a4220a369a4f504d"
                                     "59c7482724053c0d4b05426328031633"
                                     "bc79249c1c58c91b32e6802f20a1e762"
                                     "6859da201e7faad8406c702796cbdf32"
                                     "08a6cccb77baa29bec763a9a1fb868d7"
                                     "9182f00957e890d762806b443e7fd2f7"
                                     "5ef2eed5f56e92e5939ec15533a642b2"
                                     "212504b62ba72ca8e6c7fe28bbc8f687");

    const static CryptoPP::Integer q("0x62e8fffb70f05adad211051b4d27a826"
                                     "ace3a41392029e06a582a13194018b19"
                                     "de3c924e0e2c648d997340179050f3b1"
                                     "342ced100f3fd56c20363813cb65ef99"
                                     "04536665bbdd514df63b1d4d0fdc346b"
                                     "c8c17804abf4486bb14035a21f3fe97b"
                                     "af79776afab74972c9cf60aa99d32159"
                                     "1092825b15d396547363ff145de47b43");

    const static CryptoPP::Integer g("0x2");

    const static CryptoPP::byte KeyHeader[0x180] = {0x0C, 0x2E, 0x7F, 0xB6, 0x73, 0x1C, 0xDD, 0x0E, 0xF6, 0xAA, 0xC0, 0xA1, 0x86, 0xED, 0x16, 0x77,
                                                    0x81, 0xAD, 0xEE, 0xC5, 0xAA, 0xE8, 0x76, 0x2A, 0x2F, 0x5D, 0xD4, 0x9B, 0x1A, 0x46, 0xEA, 0xD0,
                                                    0x7B, 0x8C, 0xEE, 0x09, 0x2D, 0x90, 0xF6, 0x8B, 0xB6, 0x4A, 0x41, 0xB6, 0xA6, 0x98, 0xDF, 0x57,
                                                    0x5D, 0x57, 0xC3, 0xDA, 0x92, 0x24, 0xA2, 0x0B, 0x6C, 0xFC, 0x4C, 0x03, 0xAF, 0x00, 0x10, 0xF8,
                                                    0x4E, 0xA5, 0x55, 0x2F, 0x6F, 0x52, 0xF0, 0xFD, 0x76, 0xA5, 0xF7, 0x1C, 0xA6, 0x6F, 0x99, 0x22,
                                                    0xB6, 0x22, 0x9E, 0x20, 0xA9, 0x39, 0x2E, 0xAF, 0xCF, 0x02, 0xD2, 0xA0, 0x94, 0x91, 0xD7, 0x86,
                                                    0x75, 0xDC, 0xAC, 0xB6, 0xD9, 0xCC, 0x04, 0x58, 0x66, 0x9F, 0xE9, 0x38, 0xFC, 0x86, 0xEB, 0xA7,
                                                    0x22, 0x34, 0xC9, 0x0B, 0x82, 0xBF, 0x6A, 0x30, 0x17, 0x9E, 0x16, 0x8C, 0x33, 0x97, 0xFD, 0x11,
                                                    0xCD, 0x56, 0xD0, 0x03, 0xB0, 0x77, 0x1D, 0x29, 0xBD, 0x72, 0x23, 0xDA, 0x8C, 0x44, 0x42, 0x8B,
                                                    0x54, 0x78, 0x48, 0xDE, 0xAD, 0x68, 0x86, 0xE0, 0x1E, 0xD8, 0xFD, 0xA2, 0xDD, 0x28, 0x21, 0x65,
                                                    0x6B, 0x79, 0xDB, 0xE2, 0x71, 0xA7, 0xBF, 0x3B, 0xE9, 0x63, 0xE3, 0x2B, 0x62, 0x41, 0x56, 0x8C,
                                                    0xF8, 0x57, 0xAC, 0xA3, 0xC2, 0x43, 0xB7, 0xC4, 0xEB, 0x14, 0x00, 0x40, 0xBA, 0x5D, 0xB1, 0x83,
                                                    0x91, 0xB6, 0x23, 0x62, 0xE7, 0x9C, 0x98, 0xD3, 0x1B, 0x4E, 0x37, 0x51, 0x26, 0x64, 0x74, 0x3D,
                                                    0x44, 0xB9, 0x94, 0x73, 0x0C, 0x03, 0x91, 0x1B, 0x2D, 0xB5, 0xFD, 0x7F, 0xFC, 0xF0, 0x71, 0x42,
                                                    0x33, 0xFB, 0x15, 0x0F, 0xB8, 0x09, 0xBA, 0xAF, 0xB8, 0x3C, 0x9D, 0x3F, 0xB3, 0xC5, 0x8A, 0x42,
                                                    0x61, 0xFD, 0x35, 0x6C, 0xDE, 0x1C, 0x47, 0xF6, 0xD7, 0x2C, 0x4D, 0xD9, 0x45, 0x27, 0xC7, 0x13,
                                                    0x1F, 0x8D, 0x92, 0x43, 0x27, 0x08, 0x8B, 0x56, 0x06, 0xD1, 0x8C, 0x25, 0x4B, 0x8C, 0x51, 0x0D,
                                                    0xEE, 0x03, 0xB5, 0x0E, 0x90, 0xDD, 0x5E, 0xCB, 0xD8, 0x51, 0x10, 0xA2, 0xC6, 0xD6, 0xFF, 0xC9,
                                                    0xAF, 0x18, 0xA7, 0x3E, 0x17, 0x05, 0x8A, 0x34, 0xD2, 0xB9, 0x60, 0x1F, 0x38, 0xCA, 0x1B, 0xAB,
                                                    0xF8, 0x9F, 0xC6, 0x43, 0xA6, 0x32, 0x94, 0x32, 0x64, 0x3C, 0xA2, 0x45, 0xA4, 0x6B, 0xCD, 0xA8,
                                                    0xB5, 0xDE, 0xDF, 0x26, 0xA4, 0x06, 0xAB, 0xAD, 0x1D, 0x1F, 0x26, 0xCB, 0xD7, 0x58, 0xC3, 0x4C,
                                                    0x5A, 0x04, 0xC1, 0x23, 0x90, 0xED, 0xE3, 0x20, 0xBD, 0xA9, 0x7D, 0xF4, 0x76, 0x4D, 0xA4, 0x90,
                                                    0x4C, 0x2A, 0x7E, 0x49, 0x47, 0xDE, 0xF5, 0x15, 0xB6, 0x92, 0x7A, 0xC9, 0xF6, 0xDC, 0x3E, 0xEF,
                                                    0xFF, 0x93, 0xBB, 0x51, 0x0D, 0x5C, 0xDA, 0x65, 0x0A, 0x3C, 0x52, 0xE7, 0x6C, 0xFC, 0xBE, 0xA7};

    const static CryptoPP::byte ClientHash[0x20] = {0x6a, 0x62, 0x88, 0x42, 0x95, 0x84, 0xea, 0x3c, 0x3b, 0xf0, 0xc1, 0xad, 0x6d, 0xef, 0x01, 0xff,
                                                    0xf3, 0x95, 0x25, 0x91, 0x03, 0xb0, 0x4b, 0x77, 0x69, 0xb7, 0xd9, 0xb0, 0x2f, 0x1e, 0xf3, 0xfb};

} // namespace Global
